import streamlit as st
import sqlite3
from pathlib import Path
from user.logger import add_log
from db.db_connection import get_db_connection
from datetime import datetime
import shutil
import os
import pandas as pd

def get_orphaned_data_stats():
    """ч╗ЯшобцХ░цНох║Уф╕нчЪДхндчлЛцХ░цНо
    
    ш┐ФхЫЮ:
        dict: хМЕхРлхРДч▒╗хндчлЛцХ░цНочЪДч╗Яшобф┐бцБп
    """
    try:
        conn = get_db_connection()
        if not conn:
            return None
            
        cursor = conn.cursor()
        stats = {}
        
        # цгАцЯехндчлЛчЪДш┤жхНХшо░х╜Хя╝Иц▓бцЬЙхп╣х║ФчФицИ╖чЪДш┤жхНХя╝Й
        cursor.execute("""
            SELECT COUNT(*) FROM bills 
            WHERE user_id NOT IN (SELECT user_id FROM users)
        """)
        stats['orphaned_bills'] = cursor.fetchone()[0]
        
        # цгАцЯехндчлЛчЪДцЧех┐Чшо░х╜Х
        cursor.execute("""
            SELECT COUNT(*) FROM logs 
            WHERE user_id NOT IN (SELECT user_id FROM users)
        """)
        stats['orphaned_logs'] = cursor.fetchone()[0]
        
        # цгАцЯехндчлЛчЪДAWSховцИ╖шо░х╜Хя╝Иц▓бцЬЙхп╣х║ФчФицИ╖чЪДшо░х╜Хя╝Й
        cursor.execute("""
            SELECT COUNT(*) FROM aws_customers 
            WHERE user_id NOT IN (SELECT user_id FROM users)
        """)
        stats['orphaned_aws_customers'] = cursor.fetchone()[0]
        
        # шО╖хПЦхндчлЛчЪДAWSховцИ╖IDхИЧшби
        cursor.execute("""
            SELECT aws_customer_id FROM aws_customers 
            WHERE user_id NOT IN (SELECT user_id FROM users)
        """)
        orphaned_customer_ids = [row[0] for row in cursor.fetchall()]
        
        # цгАцЯеф╕ОхндчлЛAWSховцИ╖хЕ│шБФчЪДщАЪчЯешо░х╜Х
        if orphaned_customer_ids:
            cursor.execute("""
                SELECT COUNT(*) FROM aws_notifications 
                WHERE aws_customer_id IN ({})
            """.format(','.join('?' * len(orphaned_customer_ids))), 
            orphaned_customer_ids)
        else:
            cursor.execute("SELECT 0")
        stats['orphaned_aws_notifications'] = cursor.fetchone()[0]
        
        # цгАцЯеф╕ОхндчлЛAWSховцИ╖хЕ│шБФчЪДшовщШЕшо░х╜Х
        if orphaned_customer_ids:
            cursor.execute("""
                SELECT COUNT(*) FROM aws_subscriptions 
                WHERE aws_customer_id IN ({})
            """.format(','.join('?' * len(orphaned_customer_ids))), 
            orphaned_customer_ids)
        else:
            cursor.execute("SELECT 0")
        stats['orphaned_aws_subscriptions'] = cursor.fetchone()[0]
        
        # шобчоЧцА╗чЪДхндчлЛцХ░цНоцХ░щЗП
        stats['total_orphaned'] = sum(stats.values())
        
        # ц╖╗хКацЧ╢щЧ┤цИ│
        stats['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        conn.close()
        add_log("info", f"цИРхКЯч╗ЯшобхндчлЛцХ░цНо: хЕ▒хПСчО░ {stats['total_orphaned']} цЭб")
        return stats
        
    except Exception as e:
        add_log("error", f"шО╖хПЦхндчлЛцХ░цНоч╗Яшобхд▒ш┤е: {str(e)}")
        st.error(f"шО╖хПЦхндчлЛцХ░цНоч╗Яшобхд▒ш┤е: {str(e)}")
        return None

def backup_database():
    """хдЗф╗╜цХ░цНох║У
    
    ш┐ФхЫЮ:
        str: хдЗф╗╜цЦЗф╗╢ш╖пх╛Дя╝МхжВцЮЬхд▒ш┤ехИЩш┐ФхЫЮNone
    """
    try:
        # хИЫх╗║хдЗф╗╜чЫох╜Х
        backup_dir = Path("db/backups")
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        # чФЯцИРхдЗф╗╜цЦЗф╗╢хРН
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = backup_dir / f"users_db_backup_{timestamp}.db"
        
        # хдНхИ╢цХ░цНох║УцЦЗф╗╢
        shutil.copy2('db/users.db', backup_path)
        
        add_log("info", f"цХ░цНох║Ух╖▓хдЗф╗╜хИ░: {backup_path}")
        return str(backup_path)
    except Exception as e:
        add_log("error", f"цХ░цНох║УхдЗф╗╜хд▒ш┤е: {str(e)}")
        return None

def clear_orphaned_data():
    """ц╕ЕчРЖцХ░цНох║Уф╕нчЪДхндчлЛцХ░цНо
    
    ш┐ФхЫЮ:
        dict: ц╕ЕчРЖч╗УцЮЬч╗Яшобф┐бцБпя╝Мхд▒ш┤еш┐ФхЫЮNone
    """
    try:
        # щжЦхЕИш┐ЫшбМцХ░цНох║УхдЗф╗╜
        backup_path = backup_database()
        if not backup_path:
            st.error("цХ░цНох║УхдЗф╗╜хд▒ш┤ея╝Мф╕║чбоф┐ЭхоЙхЕия╝Мц╕ЕчРЖцУНф╜Ьх╖▓хПЦц╢И")
            return None
            
        conn = get_db_connection()
        if not conn:
            return None
            
        cursor = conn.cursor()
        
        # х╝АхзЛф║ЛхКб
        conn.execute("BEGIN TRANSACTION")
        
        try:
            results = {
                'deleted_subscriptions': 0,
                'deleted_notifications': 0,
                'deleted_customers': 0,
                'deleted_bills': 0,
                'deleted_logs': 0
            }
            
            # 1. щжЦхЕИшО╖хПЦхндчлЛчЪДAWSховцИ╖ID
            cursor.execute("""
                SELECT id FROM aws_customers 
                WHERE user_id NOT IN (SELECT id FROM users)
            """)
            orphaned_customer_ids = [row[0] for row in cursor.fetchall()]
            
            # 2. хИащЩдхЕ│шБФчЪДшовщШЕшо░х╜Х
            if orphaned_customer_ids:
                cursor.execute("""
                    DELETE FROM aws_subscriptions 
                    WHERE customer_id IN ({})
                    RETURNING id
                """.format(','.join('?' * len(orphaned_customer_ids))), 
                orphaned_customer_ids)
                results['deleted_subscriptions'] = len(cursor.fetchall())
            
            # 3. хИащЩдхЕ│шБФчЪДщАЪчЯешо░х╜Х
            if orphaned_customer_ids:
                cursor.execute("""
                    DELETE FROM aws_notifications 
                    WHERE customer_id IN ({})
                    RETURNING id
                """.format(','.join('?' * len(orphaned_customer_ids))), 
                orphaned_customer_ids)
                results['deleted_notifications'] = len(cursor.fetchall())
            
            # 4. хИащЩдхндчлЛчЪДAWSховцИ╖шо░х╜Х
            cursor.execute("""
                DELETE FROM aws_customers 
                WHERE user_id NOT IN (SELECT id FROM users)
                RETURNING id
            """)
            results['deleted_customers'] = len(cursor.fetchall())
            
            # 5. хИащЩдхндчлЛчЪДш┤жхНХшо░х╜Х
            cursor.execute("""
                DELETE FROM bills 
                WHERE user_id NOT IN (SELECT id FROM users)
                RETURNING id
            """)
            results['deleted_bills'] = len(cursor.fetchall())
            
            # 6. хИащЩдхндчлЛчЪДцЧех┐Чшо░х╜Х
            cursor.execute("""
                DELETE FROM logs 
                WHERE user_id NOT IN (SELECT id FROM users)
                RETURNING id
            """)
            results['deleted_logs'] = len(cursor.fetchall())
            
            # цПРф║дф║ЛхКб
            conn.commit()
            
            # ц╖╗хКацА╗шобхТМцЧ╢щЧ┤цИ│
            results['total_deleted'] = sum(results.values())
            results['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            results['backup_path'] = backup_path
            
            add_log("info", f"цИРхКЯц╕ЕчРЖхндчлЛцХ░цНо: хЕ▒ц╕ЕчРЖ {results['total_deleted']} цЭбшо░х╜Х")
            return results
            
        except Exception as e:
            # хПСчФЯщФЩшппцЧ╢хЫЮц╗Ъф║ЛхКб
            conn.rollback()
            raise e
            
        finally:
            conn.close()
            
    except Exception as e:
        add_log("error", f"ц╕ЕчРЖхндчлЛцХ░цНохд▒ш┤е: {str(e)}")
        st.error(f"ц╕ЕчРЖхндчлЛцХ░цНохд▒ш┤е: {str(e)}")
        return None

def show_clear_interface():
    """цШ╛чд║цХ░цНоц╕ЕчРЖчХМщЭв"""
    st.header("ЁЯз╣ цХ░цНоц╕ЕчРЖ")
    
    # ц╖╗хКахИ╖цЦ░цМЙщТо
    col1, col2 = st.columns([6, 1])
    with col1:
        st.subheader("хндчлЛцХ░цНоч╗Яшоб")
    with col2:
        if st.button("ЁЯФД хИ╖цЦ░"):
            st.rerun()
    
    # шО╖хПЦхндчлЛцХ░цНоч╗Яшоб
    with st.spinner("цнгхЬич╗ЯшобхндчлЛцХ░цНо..."):
        stats = get_orphaned_data_stats()
        
    if stats:
        # хИЫх╗║ф╕Аф╕кх▒Хх╝АхМ║хЯЯцШ╛чд║шпжч╗Жч╗Яшобф┐бцБп
        with st.expander("ЁЯУК шпжч╗Жч╗Яшобф┐бцБп", expanded=True):
            # ф╜┐чФиф╕ЙхИЧх╕Гх▒АцШ╛чд║ч╗Яшобф┐бцБп
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "хндчлЛш┤жхНХшо░х╜Х", 
                    stats['orphaned_bills'],
                    help="ц▓бцЬЙхп╣х║ФчФицИ╖чЪДш┤жхНХшо░х╜Х"
                )
                st.metric(
                    "хндчлЛцЧех┐Чшо░х╜Х", 
                    stats['orphaned_logs'],
                    help="ц▓бцЬЙхп╣х║ФчФицИ╖чЪДцЧех┐Чшо░х╜Х"
                )
            
            with col2:
                st.metric(
                    "хндчлЛAWSховцИ╖", 
                    stats['orphaned_aws_customers'],
                    help="ц▓бцЬЙхп╣х║ФчФицИ╖чЪДAWSховцИ╖шо░х╜Х"
                )
                st.metric(
                    "хндчлЛAWSщАЪчЯе", 
                    stats['orphaned_aws_notifications'],
                    help="ф╕ОхндчлЛAWSховцИ╖хЕ│шБФчЪДщАЪчЯешо░х╜Х"
                )
            
            with col3:
                st.metric(
                    "хндчлЛAWSшовщШЕ", 
                    stats['orphaned_aws_subscriptions'],
                    help="ф╕ОхндчлЛAWSховцИ╖хЕ│шБФчЪДшовщШЕшо░х╜Х"
                )
                st.metric(
                    "хндчлЛцХ░цНоцА╗цХ░", 
                    stats['total_orphaned'],
                    help="цЙАцЬЙч▒╗хЮЛчЪДхндчлЛцХ░цНоцА╗хТМ"
                )
            
            st.caption(f"ЁЯХТ цЬАхРОцЫ┤цЦ░цЧ╢щЧ┤: {stats['timestamp']}")
        
        # хПкцЬЙхнШхЬихндчлЛцХ░цНоцЧ╢цЙНцШ╛чд║ц╕ЕчРЖщАЙщб╣
        if stats['total_orphaned'] > 0:
            st.divider()
            st.subheader("ЁЯЧСя╕П цХ░цНоц╕ЕчРЖ")
            
            # ц╖╗хКачбошодхдНщАЙцбЖ
            confirm = st.checkbox(
                "цИСх╖▓ф║Жшзгц╕ЕчРЖцУНф╜Ьх░Жц░╕ф╣ЕхИащЩдш┐Щф║ЫцХ░цНоя╝Мх╣╢ф╕Фх╖▓чбошодш┐Щф║ЫцХ░цНочбохоЮцЧачФи",
                help="ц╕ЕчРЖцУНф╜Ьф╕НхПпцТдщФАя╝Мф╜Жф╝ЪхЬиц╕ЕчРЖхЙНшЗкхКихдЗф╗╜цХ░цНох║У"
            )
            
            # ц╕ЕчРЖцМЙщТо
            if confirm:
                if st.button("цЙзшбМц╕Ея┐╜я┐╜я┐╜", type="primary", use_container_width=True):
                    # цШ╛чд║ш┐Ых║жцПРчд║
                    progress_text = st.empty()
                    progress_bar = st.progress(0)
                    
                    # хдЗф╗╜щШ╢цо╡
                    progress_text.text("цнгхЬихдЗф╗╜цХ░цНох║У...")
                    progress_bar.progress(20)
                    
                    # цЙзшбМц╕ЕчРЖ
                    progress_text.text("цнгхЬиц╕ЕчРЖцХ░цНо...")
                    progress_bar.progress(40)
                    results = clear_orphaned_data()
                    
                    if results:
                        # цЫ┤цЦ░ш┐Ых║ж
                        progress_bar.progress(100)
                        progress_text.empty()
                        
                        # цШ╛чд║ч╗УцЮЬч╗Яшоб
                        st.success("тЬЕ ц╕ЕчРЖхоМцИРя╝Б")
                        
                        # ф╜┐чФишбица╝цШ╛чд║шпжч╗Жч╗УцЮЬ
                        result_df = pd.DataFrame([
                            ["AWSшовщШЕшо░х╜Х", results['deleted_subscriptions']],
                            ["AWSщАЪчЯешо░х╜Х", results['deleted_notifications']],
                            ["AWSховцИ╖шо░х╜Х", results['deleted_customers']],
                            ["ш┤жхНХшо░х╜Х", results['deleted_bills']],
                            ["цЧех┐Чшо░х╜Х", results['deleted_logs']],
                            ["цА╗шоб", results['total_deleted']]
                        ], columns=["цХ░цНоч▒╗хЮЛ", "ц╕ЕчРЖцХ░щЗП"])
                        
                        st.table(result_df)
                        
                        # цШ╛чд║хдЗф╗╜ф┐бцБп
                        st.info(f"""
                        ЁЯТ╛ цХ░цНох║Ух╖▓хдЗф╗╜шЗ│я╝Ъ
                        `{results['backup_path']}`
                        """)
                        
                        # ц╖╗хКахИ╖цЦ░цМЙщТо
                        if st.button("хИ╖цЦ░ч╗Яшобф┐бцБп"):
                            st.rerun()
                    else:
                        progress_bar.empty()
                        progress_text.empty()
                        st.error("тЭМ ц╕ЕчРЖцУНф╜Ьхд▒ш┤ея╝Мшп╖цЯечЬЛщФЩшппф┐бцБп")
            else:
                st.button(
                    "цЙзшбМц╕ЕчРЖ", 
                    type="primary", 
                    disabled=True,
                    help="шп╖хЕИчбошодц╕ЕчРЖцУНф╜Ь",
                    use_container_width=True
                )
        else:
            st.success("тЬи х╜УхЙНц▓бцЬЙцгАц╡ЛхИ░хндчлЛцХ░цНоя╝МцХ░цНох║УчК╢цАБшЙпхе╜уАВ")
    else:
        st.error("тЭМ цЧац│ХшО╖хПЦхндчлЛцХ░цНоч╗Яшобф┐бцБпуАВ")
        
    # ц╖╗хКах╕охКйф┐бцБп
    with st.expander("тД╣я╕П хЕ│ф║ОцХ░цНоц╕ЕчРЖ"):
        st.markdown("""
        **ф╗Аф╣ИцШпхндчлЛцХ░цНоя╝Я**
        - хндчлЛцХ░цНоцШпцМЗщВгф║Ыхд▒хО╗ф║ЖхЕ│шБФхЕ│ч│╗чЪДцХ░цНошо░х╜Х
        - ф╛ЛхжВя╝ЪцЯРф╕кчФицИ╖швлхИащЩдхРОя╝Мф╕ОшпечФицИ╖хЕ│шБФчЪДш┤жхНХуАБцЧех┐ЧчнЙшо░х╜Хх░▒цИРф╕║ф║ЖхндчлЛцХ░цНо
        
        **ц╕ЕчРЖцУНф╜Ьшп┤цШОя╝Ъ**
        1. ч│╗ч╗Яф╝ЪшЗкхКицгАц╡ЛхРДч▒╗хндчлЛцХ░цНо
        2. ц╕ЕчРЖхЙНф╝ЪшЗкхКихдЗф╗╜цХ░цНох║У
        3. ц╕ЕчРЖцУНф╜Ьф╜┐чФиф║ЛхКбчбоф┐ЭцХ░цНоф╕АшЗ┤цАз
        4. ц╕ЕчРЖцУНф╜Ьф╕НхПпцТдщФАя╝Мф╜ЖхПпф╗ещАЪш┐ЗхдЗф╗╜цБвхдН
        
        **ц│ицДПф║Лщб╣я╝Ъ**
        - цЙзшбМц╕ЕчРЖхЙНшп╖чбошодцХ░цНочбохоЮцЧачФи
        - хжВщЬАцБвхдНх╖▓ц╕ЕчРЖчЪДцХ░цНоя╝МхПпф╜┐чФихдЗф╗╜хКЯшГ╜
        - х╗║шоохоЪцЬЯцгАцЯехТМц╕ЕчРЖхндчлЛцХ░цНо
        """)