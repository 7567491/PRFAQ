from dotenv import load_dotenv
load_dotenv()

import streamlit as st
from datetime import datetime
import os
from api_claude import ChatAPI

# 页面配置
st.set_page_config(
    page_title="AGI Chat Test",
    page_icon="🤖",
    layout="wide"
)

# 初始化会话状态
if "messages" not in st.session_state:
    st.session_state.messages = []

if "logs" not in st.session_state:
    st.session_state.logs = []

# 从环境变量获取配置
if "api_key" not in st.session_state:
    st.session_state.api_key = os.getenv("API_KEY", "")

if "api_base" not in st.session_state:
    st.session_state.api_base = os.getenv("API_BASE", "")

# 从环境变量获取默认模型
if "selected_model" not in st.session_state:
    st.session_state.selected_model = os.getenv("DEFAULT_MODEL", "claude-3-5-sonnet-20240620")

# 初始化 ChatAPI
if "chat_api" not in st.session_state:
    st.session_state.chat_api = None

def add_log(message: str, level: str = "INFO"):
    """添加日志"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
    st.session_state.logs.append({
        "timestamp": timestamp,
        "level": level,
        "message": message
    })

# 创建三列布局
left_column, main_column, right_column = st.columns([1, 2, 1])

# 左侧栏（API设置）
with left_column:
    st.sidebar.title("设置")
    
    # 更新模型选择列表
    model_options = [
        "claude-3-5-sonnet-20240620",  # 将默认模型放在第一位
        "gpt-3.5-turbo",
        "gpt-4",
        "claude-2",
        "claude-instant-1"
    ]
    
    selected_model = st.sidebar.selectbox(
        "选择模型",
        model_options,
        index=model_options.index(st.session_state.selected_model)
    )
    
    if selected_model != st.session_state.selected_model:
        st.session_state.selected_model = selected_model
        add_log(f"切换模型到: {selected_model}", "INFO")
    
    # API 设置
    api_base = st.sidebar.text_input(
        "API Base URL",
        value=st.session_state.api_base,
        help="设置 API 基础地址"
    )
    
    if st.session_state.api_key:
        st.sidebar.success("✅ API Key 已设置")
        if st.sidebar.button("清除 API Key"):
            add_log("清除 API Key", "INFO")
            st.session_state.api_key = ""
            st.experimental_rerun()
    else:
        api_key = st.sidebar.text_input("输入 API Key", type="password")
        if api_key:
            add_log("设置新的 API Key", "INFO")
            st.session_state.api_key = api_key
            st.session_state.api_base = api_base
            add_log(f"设置 API Base URL: {api_base}", "INFO")

# 主聊天界面
with main_column:
    st.title("AGI Chat Test 🤖")
    
    # 显示聊天历史
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # 用户输入
    if prompt := st.chat_input("在这里输入您的消息..."):
        if not st.session_state.api_key:
            st.error("请先在侧边栏输入 API Key！")
            add_log("尝试发送消息但未设置 API Key", "ERROR")
            st.stop()

        # 确保 ChatAPI 实例存在
        if st.session_state.chat_api is None:
            st.session_state.chat_api = ChatAPI(
                st.session_state.api_key,
                st.session_state.api_base,
                logger_callback=add_log
            )

        # 添加用户消息
        add_log(f"用户输入: {prompt}", "INFO")
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # 显示助手正在输入的提示
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            try:
                add_log("开始调用 API", "INFO")
                response = st.session_state.chat_api.get_chat_response(
                    st.session_state.messages,
                    st.session_state.selected_model
                )
                
                if response.status_code == 200:
                    # 处理流式响应
                    full_response = st.session_state.chat_api.process_stream_response(
                        response,
                        message_placeholder.markdown
                    )
                    
                    add_log("API 响应完成", "INFO")
                    # 保存助手回复
                    st.session_state.messages.append({"role": "assistant", "content": full_response})
                else:
                    error_msg = f"API 请求失败，状态码: {response.status_code}"
                    add_log(error_msg, "ERROR")
                    st.error(error_msg)
                    
            except Exception as e:
                error_msg = str(e)
                add_log(f"API 调用错误: {error_msg}", "ERROR")
                st.error(f"发生错误: {error_msg}")

# 右侧栏（调试信息）
with right_column:
    st.title("调试信息")
    
    # 显示当前状态
    st.subheader("系统状态")
    st.write(f"API Key 状态: {'已设置' if st.session_state.api_key else '未设置'}")
    st.write(f"API Base URL: {st.session_state.api_base}")
    st.write(f"消息数量: {len(st.session_state.messages)}")
    
    # 显示日志
    st.subheader("运行日志")
    for log in reversed(st.session_state.logs):
        color = {
            "INFO": "blue",
            "ERROR": "red",
            "WARNING": "orange"
        }.get(log["level"], "gray")
        
        st.markdown(f"""
        <div style="border-left: 2px solid {color}; padding-left: 10px; margin: 5px 0;">
            <small style="color: gray;">{log["timestamp"]}</small><br/>
            <span style="color: {color};">[{log["level"]}]</span> {log["message"]}
        </div>
        """, unsafe_allow_html=True)
    
    # 清除日志按钮
    if st.button("清除日志"):
        st.session_state.logs = []
        st.experimental_rerun()



        import requests
import json
from typing import List, Dict, Any
from datetime import datetime

class ChatAPI:
    def __init__(self, api_key: str, api_base: str, logger_callback=None):
        self.api_key = api_key
        self.api_base = api_base
        self.logger_callback = logger_callback or (lambda *args, **kwargs: None)

    def _add_log(self, message: str, level: str = "INFO"):
        """调用日志回调函数"""
        self.logger_callback(message, level)

    def get_chat_response(self, messages: List[Dict[str, str]], model: str) -> requests.Response:
        """发送聊天请求并获取响应"""
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'User-Agent': 'Mozilla/5.0',
        }
        
        data = {
            "model": model,
            "messages": messages,
            "stream": True,
            "temperature": 0.7,
            "max_tokens": 1000
        }
        
        self._add_log(f"请求头: {json.dumps(headers, indent=2)}", "DEBUG")
        self._add_log(f"请求体: {json.dumps(data, indent=2)}", "DEBUG")
        
        try:
            response = requests.post(
                f'{self.api_base}/chat/completions',
                headers=headers,
                json=data,
                stream=True,
                timeout=30
            )
            
            self._add_log(f"响应状态码: {response.status_code}", "DEBUG")
            if response.status_code != 200:
                self._add_log(f"响应内容: {response.text}", "ERROR")
                
            return response
            
        except requests.exceptions.RequestException as e:
            self._add_log(f"请求异常: {str(e)}", "ERROR")
            raise

    def process_stream_response(self, response: requests.Response, message_callback) -> str:
        """处理流式响应"""
        full_response = ""
        try:
            for line in response.iter_lines():
                if line:
                    line = line.decode('utf-8')
                    if line.startswith('data: '):
                        try:
                            json_str = line[6:]  # 移除 "data: " 前缀
                            if json_str.strip() != "[DONE]":
                                chunk = json.loads(json_str)
                                if chunk['choices'][0]['delta'].get('content'):
                                    content = chunk['choices'][0]['delta']['content']
                                    full_response += content
                                    message_callback(full_response + "▌")
                        except json.JSONDecodeError:
                            continue
            
            message_callback(full_response)
            return full_response
            
        except Exception as e:
            self._add_log(f"处理响应流时出错: {str(e)}", "ERROR")
            raise 